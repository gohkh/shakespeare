import argparse
import roman

TITLE = 'TITLE'
ACT, SCENE, ROMAN, LOCATION = 'ACT', 'SCENE', 'ROMAN', 'LOCATION'
CHARACTER, NUMBER, STRING, OPERATOR = 'CHARACTER', 'NUMBER', 'STRING', 'OPERATOR'
DIRECTION = 'DIRECTION'
TEXT = 'TEXT'
EOF = 'EOF'


class Token(object):
    def __init__(self, type, value):
        self.type = type
        self.value = value


class Interpreter(object):
    def __init__(self,file):
        with open(file,'r') as text:
            self.text = text.read()
        self.pos = 0
        self.token = None
        self.char = self.text[self.pos]


    def ParseError(self):
        raise Exception('Parsing error')

    def MissingTitleError(self):
        raise Exception('No title detected')

    def RomanNumeralError(self):
        raise Exception('Invalid roman numeral')

    def OrderError(self):
        raise Exception('Act or scene numbers not in running order')


    def advance(self):
        self.pos += 1
        if self.pos >= len(self.text):
            self.char = None
        else:
            self.char = self.text[self.pos]

    def skip_whitespace(self):
        while self.char is not None and self.char.isspace():
            self.advance()

    def title(self):
        title = ''
        while self.char != None and self.char != '\n':
            title = title + self.char
            self.advance()
        title = title.strip()
        if title != '':
            return title

    def act(self):
        test = ''
        for i in range(len(ACT)):
            if self.char == ACT[i]:
                self.advance()
                test = test + self.char
        if test == ACT:
            return ACT

    def scene(self):
        test = ''
        for i in range(len(SCENE)):
            if self.char == SCENE[i]:
                self.advance()
                test = test + self.char
        if test == ACT:
            return SCENE

    def roman(self):
        numeral = ''
        while self.char != None and self.char != '.':
            numeral = numeral + self.char
        return roman.roman(numeral)


    def get_next_token(self):

        while self.char is not None:

            if self.pos == 0 and self.title() != None:
                return(TITLE, self.title())

            elif self.char.isspace():
                self.skip_whitespace()
                continue

            elif self.act() is not None:
                return(ACT, self.act())

            elif self.scene() is not None:
                return(SCENE, self.scene())

            elif self.roman() is not None:
                return(ROMAN, self.roman())

            self.ParseError()

        return Token(EOF, None)


    def eat(self, token_type):
        if self.token.type == token_type:
            self.get_next_token()
        else:
            self.ParseError


    def expr(self):
        self.token = self.get_next_token()

        Title = self.token
        self.eat(TITLE)

        Act = self.token
        self.eat(ACT)

        Act_num = self.token
        self.eat(ROMAN)

        Scene = self.token
        self.eat(SCENE)

        Scene_num = self.token
        self.eat(ROMAN)


def main(file):
    if file == None:
        while True:
            try:
                text = input('>>> ')
            except EOFError:
                break
            interpret = Interpreter(text)
    else:
        interpret = Interpreter(file)
    print('yay')


def init():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', type = str, default = None)
    args = parser.parse_args()

    main(args.file)

init()

"""
        text = self.text

        if self.pos >= len(text.readlines()):
            return Token(EOF, None)

        current_line = text.readlines()[self.pos].replace('\n','')

        if self.pos == 0:
            token = Token(TITLE, current_line)
            self.pos+=1
            return token

        if len(current_line.split(' ')) == 2 and current_line.split(' ')[0] == 'ACT':
            act_num = current_line.split(' ')[1]
            try:
                roman.fromRoman(act_num)
                token1 = Token(ACT, current_line.split(' ')[0])
                token2 = Token(ACT_NUM, act_num)
            except InvalidRomanNumeralError:
                raise RomanNumeralError
            self.pos+=1
            return token1, token2

        if current_line.split(' ', 2)[0] == 'SCENE':
            scene_num = current_line.split(' ', 2)[1].replace('.','')
            try:
                roman.fromRoman(scene_num)
                token1 = Token(SCENE, current_line.split(' ', 2)[0])
                token2 = Token(SCENE_NUM, scene_num)
                token3 = Token(LOCATION, current_line.split(' ', 2)[2])
            except InvalidRomanNumeralError:
                raise RomanNumeralError
            self.pos+=1
            return token1, token2

        if current_line[0:1] == '\t':
            token = Token(TEXT, current_line[2:])
            self.pos+=1
            return token

        else:
            token = Token(IGNORED, current_line)
            self.pos+=1
"""
